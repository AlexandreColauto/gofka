syntax="proto3";

package controller;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/alexandrecolauto/gofka/common/proto/controller";

service ControllerService {
    rpc HandleFetchMetadata(BrokerMetadataRequest) returns (BrokerMetadataResponse);
    rpc HandleRegisterBroker(BrokerRegisterRequest) returns (BrokerRegisterResponse);
    rpc HandleCreateTopic(CreateTopicRequest) returns (CreateTopicResponse);
    rpc HandleBrokerHeartbeat(BrokerHeartbeatRequest) returns (BrokerHeartbeatResponse);
    rpc HandleAlterPartition(AlterPartitionRequest) returns (AlterPartitionResponse);
}

message BrokerRegisterRequest {
    string id = 1;
    string address = 2;
}

message BrokerRegisterResponse {
    bool success = 1;
    string error_message = 2;
}

message BrokerHeartbeatRequest {
    string broker_id = 1;
    int64 index = 2;
}
message BrokerHeartbeatResponse {
    bool success = 1;
    string error_message = 2;
}

message CreateTopicRequest {
    string topic = 1;
    int32 n_partitions = 2;
    int32 replication_factor = 3;
}

message CreateTopicResponse {
    bool success = 1;
    string error_message = 2;
}

message BrokerMetadataRequest {
    string broker_id = 1;
    int64 index = 2;
}

message BrokerMetadataResponse {
    bool success = 1;
    string error_message = 2;
    int64 metadata_index = 3;
    repeated LogEntry logs = 4;
}

message LogEntry {
    int64 term = 1;
    int64 index = 2;
    Command command = 3;
}

message Command {
    enum CommandType {
        UNKNOWN = 0;
        CREATE_TOPIC = 1;
        CREATE_PARTITION = 2;
        CHANGE_PARTITION_LEADER = 3;
        REGISTER_BROKER = 4;
        UPDATE_BROKER = 5;
        ALTER_PARTITION = 6;
        CONFIG = 7;
    }

    CommandType type = 1;

    oneof payload {
        CreateTopicCommand create_topic = 2;
        CreatePartitionCommand create_partition = 3;
        ChangePartitionLeaderCommand change_partition_leader = 4;
        RegisterBrokerCommand register_broker = 5;
        UpdateBrokerCommand update_broker = 6;
        AlterPartitionCommand alter_partition = 7;
        ConfigCommand config = 8;
    }
}

message CreateTopicCommand {
    string topic = 1;
    int32 n_partitions = 2;
    int32 replication_factor = 3;
}

message CreatePartitionCommand {
    string topic_id = 1;
    int32 partition_count = 2;
}

message ChangePartitionLeaderCommand {
    repeated PartitionAssignment assignments = 1;
}
message PartitionAssignment {
    string topic_id = 1;
    int32 partition_id = 2;
    string new_leader = 3;
    repeated string new_replicas = 4;
    repeated string new_isr = 5;
    int32 new_epoch = 6;
}

message RegisterBrokerCommand {
    string id = 1;
    string address = 2;
    bool alive = 3;
    google.protobuf.Timestamp last_seen = 4;
}

message UpdateBrokerCommand {
    string id = 1;
    string address = 2;
    bool alive = 3;
    google.protobuf.Timestamp last_seen = 4;
}

message ConfigCommand {
    string key = 1;
    string value = 2;
    string scope = 3;
}

message AlterPartitionCommand {
    repeated AlterPartition changes = 1;
}

message AlterPartitionRequest {
    repeated AlterPartition changes = 1;
}
message AlterPartition {
    string topic = 1;
    int64 partition = 2;
    repeated string new_isr = 3;
}

message AlterPartitionResponse {
    bool success = 1;
    string error_message = 2;
}
