// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: broker/consumer.proto

package broker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsumerService_HandleRegisterConsumer_FullMethodName  = "/broker.ConsumerService/HandleRegisterConsumer"
	ConsumerService_HandleSubscribe_FullMethodName         = "/broker.ConsumerService/HandleSubscribe"
	ConsumerService_HandleFetchMessage_FullMethodName      = "/broker.ConsumerService/HandleFetchMessage"
	ConsumerService_HandleCommitOffset_FullMethodName      = "/broker.ConsumerService/HandleCommitOffset"
	ConsumerService_HandleConsumerHeartbeat_FullMethodName = "/broker.ConsumerService/HandleConsumerHeartbeat"
)

// ConsumerServiceClient is the client API for ConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerServiceClient interface {
	HandleRegisterConsumer(ctx context.Context, in *RegisterConsumerRequest, opts ...grpc.CallOption) (*RegisterConsumerResponse, error)
	HandleSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	HandleFetchMessage(ctx context.Context, in *FetchMessageRequest, opts ...grpc.CallOption) (*FetchMessageResponse, error)
	HandleCommitOffset(ctx context.Context, in *CommitOffsetRequest, opts ...grpc.CallOption) (*CommitOffsetResponse, error)
	HandleConsumerHeartbeat(ctx context.Context, in *ConsumerHeartbeatRequest, opts ...grpc.CallOption) (*ConsumerHeartbeatResponse, error)
}

type consumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerServiceClient(cc grpc.ClientConnInterface) ConsumerServiceClient {
	return &consumerServiceClient{cc}
}

func (c *consumerServiceClient) HandleRegisterConsumer(ctx context.Context, in *RegisterConsumerRequest, opts ...grpc.CallOption) (*RegisterConsumerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterConsumerResponse)
	err := c.cc.Invoke(ctx, ConsumerService_HandleRegisterConsumer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) HandleSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, ConsumerService_HandleSubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) HandleFetchMessage(ctx context.Context, in *FetchMessageRequest, opts ...grpc.CallOption) (*FetchMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchMessageResponse)
	err := c.cc.Invoke(ctx, ConsumerService_HandleFetchMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) HandleCommitOffset(ctx context.Context, in *CommitOffsetRequest, opts ...grpc.CallOption) (*CommitOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitOffsetResponse)
	err := c.cc.Invoke(ctx, ConsumerService_HandleCommitOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) HandleConsumerHeartbeat(ctx context.Context, in *ConsumerHeartbeatRequest, opts ...grpc.CallOption) (*ConsumerHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumerHeartbeatResponse)
	err := c.cc.Invoke(ctx, ConsumerService_HandleConsumerHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServiceServer is the server API for ConsumerService service.
// All implementations must embed UnimplementedConsumerServiceServer
// for forward compatibility.
type ConsumerServiceServer interface {
	HandleRegisterConsumer(context.Context, *RegisterConsumerRequest) (*RegisterConsumerResponse, error)
	HandleSubscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	HandleFetchMessage(context.Context, *FetchMessageRequest) (*FetchMessageResponse, error)
	HandleCommitOffset(context.Context, *CommitOffsetRequest) (*CommitOffsetResponse, error)
	HandleConsumerHeartbeat(context.Context, *ConsumerHeartbeatRequest) (*ConsumerHeartbeatResponse, error)
	mustEmbedUnimplementedConsumerServiceServer()
}

// UnimplementedConsumerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsumerServiceServer struct{}

func (UnimplementedConsumerServiceServer) HandleRegisterConsumer(context.Context, *RegisterConsumerRequest) (*RegisterConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRegisterConsumer not implemented")
}
func (UnimplementedConsumerServiceServer) HandleSubscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSubscribe not implemented")
}
func (UnimplementedConsumerServiceServer) HandleFetchMessage(context.Context, *FetchMessageRequest) (*FetchMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFetchMessage not implemented")
}
func (UnimplementedConsumerServiceServer) HandleCommitOffset(context.Context, *CommitOffsetRequest) (*CommitOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCommitOffset not implemented")
}
func (UnimplementedConsumerServiceServer) HandleConsumerHeartbeat(context.Context, *ConsumerHeartbeatRequest) (*ConsumerHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleConsumerHeartbeat not implemented")
}
func (UnimplementedConsumerServiceServer) mustEmbedUnimplementedConsumerServiceServer() {}
func (UnimplementedConsumerServiceServer) testEmbeddedByValue()                         {}

// UnsafeConsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServiceServer will
// result in compilation errors.
type UnsafeConsumerServiceServer interface {
	mustEmbedUnimplementedConsumerServiceServer()
}

func RegisterConsumerServiceServer(s grpc.ServiceRegistrar, srv ConsumerServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsumerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsumerService_ServiceDesc, srv)
}

func _ConsumerService_HandleRegisterConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).HandleRegisterConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_HandleRegisterConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).HandleRegisterConsumer(ctx, req.(*RegisterConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_HandleSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).HandleSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_HandleSubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).HandleSubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_HandleFetchMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).HandleFetchMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_HandleFetchMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).HandleFetchMessage(ctx, req.(*FetchMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_HandleCommitOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).HandleCommitOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_HandleCommitOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).HandleCommitOffset(ctx, req.(*CommitOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_HandleConsumerHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).HandleConsumerHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_HandleConsumerHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).HandleConsumerHeartbeat(ctx, req.(*ConsumerHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerService_ServiceDesc is the grpc.ServiceDesc for ConsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.ConsumerService",
	HandlerType: (*ConsumerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleRegisterConsumer",
			Handler:    _ConsumerService_HandleRegisterConsumer_Handler,
		},
		{
			MethodName: "HandleSubscribe",
			Handler:    _ConsumerService_HandleSubscribe_Handler,
		},
		{
			MethodName: "HandleFetchMessage",
			Handler:    _ConsumerService_HandleFetchMessage_Handler,
		},
		{
			MethodName: "HandleCommitOffset",
			Handler:    _ConsumerService_HandleCommitOffset_Handler,
		},
		{
			MethodName: "HandleConsumerHeartbeat",
			Handler:    _ConsumerService_HandleConsumerHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker/consumer.proto",
}
